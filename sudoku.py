def initialize_sudoku():
    # Define variables
    variables = {
        'C11': [1], 'C12': [1, 2, 3, 4], 'C13': [1, 2, 3, 4], 'C14': [1, 2, 3, 4],
        'C21': [1, 2, 3, 4], 'C22': [2], 'C23': [1, 2, 3, 4], 'C24': [1, 2, 3, 4],
        'C31': [1, 2, 3, 4], 'C32': [1, 2, 3, 4], 'C33': [3], 'C34': [1, 2, 3, 4],
        'C41': [1, 2, 3, 4], 'C42': [1, 2, 3, 4], 'C43': [1, 2, 3, 4], 'C44': [4]
    }

    # Define constraints
    constraints = [
        #C11 constraints
        (('C11', 'C12'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C11', 'C21'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C11', 'C13'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C11', 'C31'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C11', 'C14'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C11', 'C41'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C11', 'C22'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C12 constraints
        (('C12', 'C11'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C12', 'C13'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C12', 'C14'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C12', 'C22'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C12', 'C32'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C12', 'C42'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C12', 'C21'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C13 Constraints
        (('C13', 'C11'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C13', 'C12'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C13', 'C14'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C13', 'C23'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C13', 'C33'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C13', 'C43'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C13', 'C24'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C14 Constraints
        (('C14', 'C11'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C14', 'C12'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C14', 'C13'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C14', 'C24'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C14', 'C34'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C14', 'C44'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C14', 'C23'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C21 Constraints
        (('C21', 'C22'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C21', 'C23'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C21', 'C24'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C21', 'C11'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C21', 'C31'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C21', 'C41'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C21', 'C12'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C22 Constraints
        (('C22', 'C21'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C22', 'C23'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C22', 'C24'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C22', 'C12'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C22', 'C32'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C22', 'C42'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C22', 'C11'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C23 Constraints
        (('C23', 'C21'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C23', 'C22'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C23', 'C24'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C23', 'C13'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C23', 'C33'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C23', 'C43'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C23', 'C14'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C24 Constraints
        (('C24', 'C21'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C24', 'C22'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C24', 'C23'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C24', 'C14'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C24', 'C34'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C24', 'C44'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C24', 'C13'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C31 Constraints
        (('C31', 'C32'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C31', 'C33'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C31', 'C34'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C31', 'C11'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C31', 'C21'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C31', 'C41'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C31', 'C42'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C32 Constraints
        (('C32', 'C31'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C32', 'C33'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C32', 'C34'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C32', 'C12'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C32', 'C22'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C32', 'C42'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C32', 'C41'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C33 Constraints
        (('C33', 'C31'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C33', 'C32'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C33', 'C34'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C33', 'C13'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C33', 'C23'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C33', 'C43'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C33', 'C44'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C34 Constraints
        (('C34', 'C31'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C34', 'C32'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C34', 'C33'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C34', 'C14'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C34', 'C24'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C34', 'C44'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C34', 'C43'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C41 Constraints
        (('C41', 'C42'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C41', 'C43'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C41', 'C44'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C41', 'C11'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C41', 'C21'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C41', 'C31'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C41', 'C31'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C42 Constraints
        (('C42', 'C41'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C42', 'C43'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C42', 'C44'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C42', 'C12'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C42', 'C22'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C42', 'C32'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C42', 'C31'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C43 Constraints
        (('C43', 'C41'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C43', 'C42'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C43', 'C44'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C43', 'C13'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C43', 'C23'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C43', 'C33'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C43', 'C34'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),

        #C44 Constraints
        (('C44', 'C41'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C44', 'C42'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C44', 'C43'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C44', 'C14'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C44', 'C24'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C44', 'C34'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),
        (('C44', 'C33'), [(1, 2), (1, 3),(1,4),(2,1),(2,3),(2,4),(3,1),(3,2),(3,4),(4,1),(4,2),(4,3)]),


    ]
    
    return {'VARIABLES': variables, 'CONSTRAINTS': constraints}

def revise(csp, var1, var2):
    revised = False
    constraints = csp['CONSTRAINTS']
    
    # Find the constraint between var1 and var2
    constraint = None
    for c in constraints:
        if (c[0][0] == var1 and c[0][1] == var2):
            constraint = c
            break
    
    if constraint is None:
        return False  # No constraint found
    
    domain_var1 = csp['VARIABLES'][var1]
    domain_var2 = csp['VARIABLES'][var2]
    
    print(f"Constraint between {var1} and {var2}: {constraint}")
    print(f"Domain of {var1}: {domain_var1}")
    print(f"Domain of {var2}: {domain_var2}")
    
    values_to_remove = set()
    
    # Iterate over each value in the domain of var2
    for val2 in domain_var2:
        print(f"Checking value {val2} in domain of {var2}")
        # Check if there exists a value in the domain of var1 that satisfies the constraint with val2
        satisfying_value_exists = False
        for val1 in domain_var1:
            if (val1, val2) in constraint[1]:
                satisfying_value_exists = True
                break
        
        # If no satisfying value exists in domain_var1 for val2, remove val2 from domain_var2
        if not satisfying_value_exists:
            print(f"No satisfying value found in domain of {var1} for {val2} in domain of {var2}")
            values_to_remove.add(val2)
            revised = True
    
    # Remove values from domain_var2
    for val in values_to_remove:
        print(f"Removing value {val} from domain of {var2}")
        domain_var2.remove(val)
    
    print(f"Updated domain of {var2}: {domain_var2}")
    
    return revised


#csp = initialize_sudoku()
#print(revise(csp,"C22","C23"))

def AC3(csp):
    def get_neighbors(csp, var):
        neighbors = set()
        constraints = csp['CONSTRAINTS']
        for constraint in constraints:
            if var in constraint[0]:
                neighbor = constraint[0][0] if constraint[0][1] == var else constraint[0][1]
                neighbors.add(neighbor)
        return neighbors

    def check_neighbors(csp, var):
        neighbors = get_neighbors(csp, var)
        for neighbor in neighbors:
            if not csp['VARIABLES'][neighbor]:
                return False
        return True

    queue = []
    constraints = csp['CONSTRAINTS']

    # Initialize queue with all arcs from constraints
    for constraint in constraints:
        var1, var2 = constraint[0]
        queue.append((var1, var2))

    # Process arcs in the queue
    while queue:
        var1, var2 = queue.pop(0)

        # Revise the CSP based on the constraint between var1 and var2
        if revise(csp, var1, var2):
            # If any value is removed from the domain of var1, add arcs (X, var1) to the queue
            for neighbor in get_neighbors(csp, var1):
                if neighbor != var2:
                    queue.append((neighbor, var1))

    # Check if all variables and their neighbors have at least one value left in their domains
    for var in csp['VARIABLES']:
        if not csp['VARIABLES'][var] or not check_neighbors(csp, var):
            return False
    return True

csp = initialize_sudoku()
print(AC3(csp))

def minimum_remaining_values(csp, assignment):
    unassigned_variables = [var for var in csp['VARIABLES'] if var not in assignment]
    min_domain_size = float('inf')
    min_domain_variable = None
    
    for var in unassigned_variables:
        domain_size = len(csp['VARIABLES'][var])
        if domain_size < min_domain_size:
            min_domain_size = domain_size
            min_domain_variable = var
    
    return min_domain_variable

#print(minimum_remaining_values(csp,{"C43":2}))

def backtrack_search(csp):
    def is_complete(assignment, csp):
        return all(len(domain) == 1 for domain in csp['VARIABLES'].values())
    
    def backtrack(assignment, csp, assignment_order, remaining_domains):
        if is_complete(assignment, csp):
            return assignment, assignment_order, remaining_domains
        
        var = minimum_remaining_values(csp, assignment)
        if var is None:
            return None  # No valid variable found
        
        for value in csp['VARIABLES'][var]:
            new_assignment = assignment.copy()
            new_assignment[var] = value
            assignment_order.append((var, value))
            
            # Maintain arc consistency using AC-3
            updated_domains = AC3(csp)
            
            if updated_domains is not None:
                result = backtrack(new_assignment, csp, assignment_order, updated_domains)
                if result is not None:
                    return result
                
            assignment_order.pop()
            del new_assignment[var]
        
        return None
    
    assignment = {}
    assignment_order = []
    remaining_domains = {var: domain.copy() for var, domain in csp['VARIABLES'].items()}
    
    result = backtrack(assignment, csp, assignment_order, remaining_domains)
    if result is None:
        return None, None, None  # No solution found
    else:
        return result

# Test the backtracking search
#csp = initialize_sudoku()
solution, assignment_order, remaining_domains = backtrack_search(csp)
print("Solution:", solution)
#print("Assignment Order:", assignment_order)
#print("Remaining Domains:", remaining_domains)

